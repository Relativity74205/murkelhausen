image: ${CI_REGISTRY}/auxmoney/docker-images/python-dev:3.10-latest

stages:
  - build
  - lint
  - test
  - security
  - documentation
  - docker
  - deploy

variables:
  POETRY_VIRTUALENVS_PATH: venv
  REVIEW_IMAGE: ${CI_REGISTRY}/auxmoney/docker-images/docker-compose:latest

.get_image_name: &get_image_name
  before_script:
    - export DOCKER_AUX_IMAGES_TAG=${CI_COMMIT_REF_SLUG}
    - if [ -n "${CI_COMMIT_TAG}" ]; then export DOCKER_AUX_IMAGES_TAG=${CI_COMMIT_TAG}; fi
    - export IMAGE_NAME=${CI_REGISTRY_IMAGE}:${DOCKER_AUX_IMAGES_TAG}
    - echo IMAGE_NAME=${IMAGE_NAME}
    - echo DOCKER_AUX_IMAGES_TAG=${DOCKER_AUX_IMAGES_TAG}

poetry_install:
  tags: [docker-misc]
  stage: build
  script:
    - poetry install
  artifacts:
    expire_in: 1 week
    paths:
      - ${POETRY_VIRTUALENVS_PATH}

black:
  tags: [docker-misc]
  stage: lint
  needs: [ poetry_install ]
  script:
    - poetry run black src/ tests/ --check

mypy:
  tags: [docker-misc]
  stage: lint
  needs: [ poetry_install ]
  script:
    - poetry run mypy src/ --junit-xml=mypy-report.xml
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - mypy-report.xml
    reports:
      junit: mypy-report.xml

isort:
  tags: [docker-misc]
  stage: lint
  needs: [ poetry_install ]
  script:
    - poetry run isort . --check

pytest:
  tags: [docker-misc]
  stage: test
  needs: [ poetry_install ]
  script:
    - poetry run coverage run -m pytest tests/ -v --junitxml=pytest-report.xml
    - poetry run coverage report
    - poetry run coverage xml
  coverage: '/TOTAL.*?(\d{1,3}%)/'
  artifacts:
    reports:
      junit: pytest-report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

safety:
  tags: [docker-misc]
  stage: security
  needs: [ poetry_install ]
  script:
    - poetry export -f requirements.txt -o requirements.txt
    - poetry run safety check -r requirements.txt

liccheck:
  tags: [docker-misc]
  stage: security
  needs: [ poetry_install ]
  script:
    - poetry export -f requirements.txt -o requirements.txt
    - poetry run liccheck

bandit:
  tags: [docker-misc]
  stage: security
  needs: [ poetry_install ]
  script:
    - poetry run bandit -r src -f xml -o bandit-report.xml
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - bandit-report.xml
    reports:
      junit: bandit-report.xml
dockerize:
  <<: *get_image_name
  tags: [docker-misc]
  stage: docker
  image: docker:git
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build --target prod . -t ${IMAGE_NAME} --build-arg REGISTRY=${CI_REGISTRY}
    - docker push ${IMAGE_NAME}

pages:
  tags: [docker-misc]
  stage: documentation
  needs: [ poetry_install ]
  only:
    - main
  script:
    - poetry run mkdocs build -d public
  artifacts:
    paths:
      - public
