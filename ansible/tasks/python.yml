- name: Install required system packages
  apt:
    pkg:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
      - python3-venv
    state: latest
    update_cache: true
  become: True

- name: clone Pyenv
  shell: 'curl https://pyenv.run | /bin/bash'
  args:
    creates: '~/.pyenv'
    executable: /bin/bash

- name: set directory permissions of pyenv
  file:
    path: '/home/{{ user }}/.pyenv'
    mode: 0744
    recurse: yes

- name: write .pyenvrc
  copy:
    src: files/.pyenvrc
    dest: '/home/{{ user }}/.pyenvrc'
    mode: 0644

- name: add .pyenvrc to .profile
  lineinfile:
    path: '{{ item }}'
    line: 'source ~/.pyenvrc'
    create: yes
    mode: 0644
  loop: '{{ source_files }}'

- name: add pyenv plugin to .zshrc
  include_role:
    name: add_plugin_to_zshrc
  vars:
    new_plugin: pyenv
  when: oh_my_zsh.install == true

- name: install python versions
  shell: '/home/{{ user }}/.pyenv/bin/pyenv install {{ item }}:latest -s'
  register: python_version_installed
  changed_when: python_version_installed.stdout != ""
  loop: '{{ python.versions }}'

- name: get latest python_full_version
  shell: /home/{{ user }}/.pyenv/bin/pyenv versions | grep -oP '3.10.(\d{1,2})'
  register: python_full_version
  changed_when: false

- name: set python3.10 as global
  lineinfile:
    path: /home/{{ user }}/.pyenv/version
    line: '{{ python_full_version.stdout }}'
    create: yes

# TODO: make idempotent and make sure, it is installed with pyenv python and not with system python
- name: install pipx
  shell: python3 -m pip install --user pipx
  # shell: /home/{{ user }}/.pyenv/versions/{{ python_full_version.stdout }} -m pip install --user pipx

- name: check if pipx is on path
  shell: pipx --version
  args:
    executable: /bin/bash
  changed_when: false

- name: install cookiecutter with pipx
  shell: pipx install cookiecutter
  args:
    executable: /bin/bash
  register: cookiecutter_install
  changed_when: '"already seems to be installed" not in cookiecutter_install.stdout'

- name: check if cookiecutter is on path
  shell: cookiecutter --version
  args:
    executable: /bin/bash
  changed_when: false

- name: install poetry with pipx
  shell: pipx install poetry
  args:
    executable: /bin/bash
  register: poetry_install
  changed_when: '"already seems to be installed" not in poetry_install.stdout'

- name: check if cookiecutter is on path
  shell: poetry --version
  args:
    executable: /bin/bash
  changed_when: false

- name: add poetry plugin to .zshrc
  include_role:
    name: add_plugin_to_zshrc
  vars:
    new_plugin: poetry
  when: oh_my_zsh.install == true

# TODO add https://python-poetry.org/docs/master/configuration/#virtualenvsprefer-active-python-experimental