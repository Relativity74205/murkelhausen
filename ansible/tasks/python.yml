- name: clone Pyenv
  shell: 'curl https://pyenv.run | /bin/bash'
  args:
    creates: $HOME/.pyenv
    executable: /bin/bash

- name: set directory permissions of pyenv
  file:
    path: $HOME/.pyenv
    mode: 0744
    recurse: yes

- name: write .pyenvrc
  copy:
    src: files/.pyenvrc
    dest: $HOME/.pyenvrc
    mode: 0644

- name: add .pyenvrc to .profile
  lineinfile:
    path: '{{ item }}'
    line: 'source ~/.pyenvrc'
    create: yes
    mode: 0644
  loop: '{{ source_files }}'

- name: add pyenv plugin to .zshrc
  include_role:
    name: add_plugin_to_zshrc
  vars:
    new_plugin: pyenv
  when: (oh_my_zsh is defined) and (oh_my_zsh.install == true)

- name: Install required system packages
  apt:
    pkg:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
      - python3-venv
    state: latest
    update_cache: true
  become: True

- name: install python versions
  shell: $HOME/.pyenv/bin/pyenv install {{ item }} -s
  register: python_version_installed
  changed_when: python_version_installed.stdout != ""
  loop: '{{ python.versions }}'

- name: get latest python_full_version
  shell: $HOME/.pyenv/bin/pyenv versions | grep -oP '{{ python.default_version }}.(\d{1,2})'
  register: python_full_version
  changed_when: false

- name: set python{{ python.default_version }} as global
  lineinfile:
    path: $HOME/.pyenv/version
    line: '{{ python_full_version.stdout }}'
    create: yes

- name: install pipx
  pip:
    name: pipx
    extra_args: --user

- name: install cookiecutter with pipx
  community.general.pipx:
    name: cookiecutter

- name: install bpython with pipx
  community.general.pipx:
    name: bpython

- name: install black with pipx
  community.general.pipx:
    name: black

- name: install blackd into pipx-black
  community.general.pipx:
    name: black
    state: inject
    inject_packages: blackd

- name: install isort with pipx
  community.general.pipx:
    name: isort

- name: install poetry with pipx
  community.general.pipx:
    name: poetry

- name: add poetry plugin to .zshrc
  include_role:
    name: add_plugin_to_zshrc
  vars:
    new_plugin: poetry
  when: (oh_my_zsh is defined) and (oh_my_zsh.install == true)

- name: add poetry virtualenvs.prefer-active-python=true setting
  block:
    - name: add virtual env section
      lineinfile:
        path: '~/.config/pypoetry/config.toml'
        line: '[virtualenvs]'
        insertafter: 'EOF'
        create: yes
        mode: 0644

    - name: add prefer-active-python setting
      lineinfile:
        path: '~/.config/pypoetry/config.toml'
        line: 'prefer-active-python = true'
        insertafter: '[virtualenvs]'
